bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
bip.net<- network(bip,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
ggnet2(bip.net,
color= "mode", palette = col,
label= TRUE, shape= "mode",
edge.label= "weights")
require(ggplot2)
require(network)
require(igraph)
require(sna)
require(ggnet)
require(ggrepel)
require(ergm)
require(intergraph)
require(RColorBrewer)
require(ggplot2)
require(network)
require(igraph)
require(sna)
require(ggnet)
require(ggrepel)
require(ergm)
require(intergraph)
require(RColorBrewer)
require(ggplot2)
require(network)
require(igraph)
require(sna)
require(ggnet)
require(ggrepel)
require(ergm)
require(intergraph)
require(RColorBrewer)
require(ggplot2)
require(network)
require(igraph)
require(sna)
require(ggnet)
require(ggrepel)
require(ergm)
require(intergraph)
require(RColorBrewer)
bip_railway <- function (mymat, nodesize=9, label=F) {
# Coords for mode "A"
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, dim(mymat)[1])+2)
# Coords for mode "P"
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1, dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA, coordP))
#
# Initialize and plot the network with a railway layout.
test.net<- bip_init_network(mymat)
p<- ggnet2(test.net, mode=mylayout, label=label,
size= nodesize, label.size=nodesize/3,
layout.exp=1.5) + coord_flip()
p
}
bip_railway()
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, dim(mymat)[1])+2)
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1, dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA, coordP))
test.net<- bip_init_network(mymat)
p<- ggnet2(test.net, mode=mylayout, label=label,
size= nodesize, label.size=nodesize/3,
layout.exp=1.5) + coord_flip()
p
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, dim(mymat)[1])+2)
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1, dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA, coordP))
nodesize=9
test.net<- bip_init_network(mymat)
p<- ggnet2(test.net, mode=mylayout, label=label,
size= nodesize, label.size=nodesize/3,
layout.exp=1.5) + coord_flip()
p
# Plot layout coordinates for railway networkplot
# A matrix whose rows contain the x,y coordinates of the vertices of d.
#
# Coords for mode "A"
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, dim(mymat)[1])+2)
# Coords for mode "P"
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1, dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA, coordP))
nodesize=9; label=F;
#
# Initialize and plot the network with a railway layout.
test.net<- bip_init_network(mymat)
p<- ggnet2(test.net, mode=mylayout, label=label,
size= nodesize, label.size=nodesize/3,
layout.exp=1.5) + coord_flip()
p
# Plot layout coordinates for railway networkplot
# A matrix whose rows contain the x,y coordinates of the vertices of d.
#
# Coords for mode "A"
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, dim(mymat)[1])+2)
# Coords for mode "P"
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1, dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA, coordP))
nodesize=9; label=T;
#
# Initialize and plot the network with a railway layout.
test.net<- bip_init_network(mymat)
p<- ggnet2(test.net, mode=mylayout, label=label,
size= nodesize, label.size=nodesize/3,
layout.exp=1.5) + coord_flip()
p
mymat <- read.delim("data.txt", row.names=1)   # Not run.
mymat <- read.table(pipe("pbpaste"), header= T, sep= "\t", row.names= 1)
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
pp1<- ggnet2(nch.net, size= 6, color= "mode", label= T, label.size=3,
palette= c("actor"= "indianred3", "event"= "steelblue4"))
pp1
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(bin)
bip_railway(bin.net)
mymat
bip_railway(mymat)
bip_railway(mymat, label=T)
# Plot layout coordinates for railway networkplot
#
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
bip_railway(mymat)
network.vertex.names(mymat)
network.vertex.names(mynet)
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
mynet<- bip_init_network(mymat)
bip_railway(mynet, label=T)
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
mynet<- bip_init_network(mymat)
bip_railway(mynet, label=T)
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
bip_railway(mymat, label=T)
network.vertex.names
# The Nava de las Correhuelas dataset.
nch <- read.table("./data-raw/w96.txt",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
# The Nava de las Correhuelas dataset.
nch <- read.table("./data-raw/w96.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
## Node attributes, animals
nch_A<- read.table("./data-raw/w96_animal.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
nch<- read.table("./data-raw/w96.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
nch_A<- read.table("./data-raw/w96_animal.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
nch_A<- read.table("./data-raw/w96_animal.csv",
header=T, sep=",",
dec=".", na.strings="NA")
nch_P<- read.table("./data-raw/w96_plant.csv",
header=T, sep=",",
dec=".", na.strings="NA")
hr<- read.table("./data-raw/w97.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
hr_A<- read.table("./data-raw/w97_animal.csv",
header=T, sep=",",
dec=".", na.strings="NA")
hr_P<- read.table("./data-raw/w97_plant.csv",
header=T, sep=",",
dec=".", na.strings="NA")
nch.net <- bip_init_network(nch)
nch.ig<- bip_init_igraph(nch)
hr.net <- bip_init_network(hr)
if(!is.network(nch.net)) stop("Must first initialize the network; use 'bip_init_network.R'.")
nch.net<- bip_init_network(nch)
hr.net<- bip_init_network(hr)
mynet<- nch.net
require(ggnet)
require(ggrepel)
# Detect and color the mode
col= c("actor"= "grey80", "event"= "gold2")
ggnet2(mynet,
color= "mode", palette= col,
label= TRUE, label.size=3,
layout.exp= 0.25)        # Using layout.exp because of long labels
col= c("actor"= "#FC9272", "event"= "#9ECAE1")
pp<- ggnet2(hr.net, size=7,
shape= "mode", #label= T,
color= "mode", palette= col,
edge.size= bip_edgewt(nch, 5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3)
pp
source("./R/bip_edgewt")
source("./R/bip_init_network.R")
source("./R/bip_init_igraph.R")
source("./R/bip_edgewt.R")
# Set colors for each mode
col= c("actor"= "#FC9272", "event"= "#9ECAE1")
pp<- ggnet2(hr.net, size=7,
shape= "mode", #label= T,
color= "mode", palette= col,
edge.size= bip_edgewt(nch, 5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3)
# Set colors for each mode
col= c("actor"= "#FC9272", "event"= "#9ECAE1")
pp<- ggnet2(hr.net, size=7,
shape= "mode", #label= T,
color= "mode", palette= col,
edge.size= bip_edgewt(hr, 5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3)
pp
# Set colors for each mode
col= c("actor"= "#FC9272", "event"= "#9ECAE1")
pp<- ggnet2(hr.net, size=7,
shape= "mode", #label= T,
color= "mode", palette= col,
edge.size= bip_edgewt(hr, 5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(hr.net)),
color= "black", size= 3)
pp
hr
glimse(nch_A)
glimpse(nch_A)
glimpse(nch_P)
mode()
dim(nch)
nch
dim(nch[1]
)
nch[1]
nch_A
dim(nch_A)
dim(nch)
nch.net
x = data.frame(Species= network.vertex.names(nch.net))
for (i in names(nch_A)) {
y = merge(x, nch_A, by = "Species", sort = FALSE)[, i ]
set.vertex.attribute(twitter, i, as.character(y))
)
x<- data.frame(Species= network.vertex.names(nch.net))
x
for (i in names(nch_A)) {
y = merge(x, nch_A, by = "Species", sort = FALSE)[, i ]
set.vertex.attribute(twitter, i, as.character(y))
}
for (i in names(nch_A)) {
y = merge(x, nch_A, by = "Species", sort = FALSE)[, i ]
set.vertex.attribute(nch.net, i, as.character(y))
}
as.network(nch.net)
x<- data.frame(Species= network.vertex.names(nch.net))
x
for (i in names(nch_A)) {
y= merge(x, nch_A, by= "Species", sort= FALSE)[, i ]
set.vertex.attribute(nch.net, i, as.character(y))
}
set.vertex.attribute(nch.ig , i, as.character(y))
i=1
y= merge(x, nch_A, by= "Species", sort= FALSE)[, i ]
y
str(y)
i=5
y= merge(x, nch_A, by= "Species", sort= FALSE)[, i ]
y
tt<- merge(nch_A,nch_P,all=TRUE)
tt
?rbind_all
tt<- bind_rows(list(nch_A,nch_P))
str(tt)
tt
tt<- full_join(list(nch_A,nch_P))
tt<- full_join(nch_A,nch_P)
tt
names(nch_att)
nch_att<- full_join(nch_A,nch_P)
names(nch_att)
names(nch_A)
names(nch_P)
pp2<- ggnet2(nch.net, size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5) + # check_overlap= TRUE
guides(color= FALSE)
pp2
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3)
pp1
ggnet2(nch.net, color = "Fam")
nch_att$Family
get.vertex.attribute(nch.net,Fam)
list.network.attributes(nch.net)
list.node.attributes(nch.net)
list.vertex.attributes(nch.net)
network::list.vertex.attributes(nch.net)
network::list.vertex.attributes(nch.net)[1]
nch.net %v% "Fam"<- nch_att$Family
?%v%
nch.net %v% "Fam"= nch_att$Family
network::get.vertex.attribute(nch.net,Fam)add.edge()
network::get.vertex.attribute(nch.net,Fam)
network::list.vertex.attributes(nch.net)
nch.net %v% "Gen"= nch_att$Genus
network::list.vertex.attributes(nch.net)
nch.net %v% "BM"= nch_att$Body_mass
nch.net %v% "FrLen"= nch_att$Fruit_length
ggnet2(nch.net, color = "Fam")
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3)
pp1
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3,
palette("Set2"))
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3,
palette="Set2")
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3,
palette="Set4")
pp1<- ggnet2(nch.net, size= 6, color= "BM", label= T, label.size=3)
pp1
pp1<- ggnet2(nch.net, size= 6, color= "Fam", label= T, label.size=3)
pp1
# The Nava de las Correhuelas dataset.
nch<- read.table("./data-raw/w96.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
## Node attributes, animals
nch_A<- read.table("./data-raw/w96_animal.csv",
header=T, sep=",",
dec=".", na.strings="NA")
## Node attributes, plants
nch_P<- read.table("./data-raw/w96_plant.csv",
header=T, sep=",",
dec=".", na.strings="NA")
# The Hato Raton dataset.
hr<- read.table("./data-raw/w97.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
## Node attributes, animals
hr_A<- read.table("./data-raw/w97_animal.csv",
header=T, sep=",",
dec=".", na.strings="NA")
## Node attributes, plants
hr_P<- read.table("./data-raw/w97_plant.csv",
header=T, sep=",",
dec=".", na.strings="NA")
glimpse(nch_A)
glimpse(nch_P)
glimpse(hr_A)
glimpse(hr_P)
source("./R/bip_init_network.R")
source("./R/bip_init_igraph.R")
# test.net<- bip_init_network(mymat)
# test.ig<- bip_init_igraph(mymat)
nch.net<- bip_init_network(nch)
nch.ig<- bip_init_igraph(nch)
hr.net<- bip_init_network(hr)
hr.ig<- bip_init_igraph(hr)
# Sourcing required functions and initializing the net objects.
source("./R/bip_igplot.R")
source("./R/bip_qtplot.R")
source("./R/bip_railway.R")
source("./R/vectorize.R")
source("./R/bip_edgewt.R")
# Plotting bipartite networks from adjacency matrix of two-mode network.
# Using ggnet.
# DATE: 15Jul2013. Updated to ggnet 11/11/2016.
#
require(ggnet)
require(ggrepel)
#
# test.net<- bip_init_network(mymat)
mynet<- nch.net
if(!is.network(nch.net)) stop("Must first initialize the network; use 'bip_init_network.R'.")
# Plot layout coordinates for railway networkplot. Input is the
# adjacency matrix.
#
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
bip_railway(mymat, label=T)
# Detect and color the mode
col= c("actor"= "grey80", "event"= "gold2")
ggnet2(mynet,
color= "mode", palette= col,
label= TRUE, label.size=3,
layout.exp= 0.25)        # Using layout.exp because of long labels
# Label weights directly into edges
bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
bip.net<- network(bip,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
ggnet2(bip.net,
color= "mode", palette = col,
label= TRUE, shape= "mode",
edge.label= "weights")
# Set colors for each mode
col= c("actor"= "#FC9272", "event"= "#9ECAE1")
pp<- ggnet2(hr.net, size=7,
shape= "mode", #label= T,
color= "mode", palette= col,
edge.size= bip_edgewt(hr, 5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(hr.net)),
color= "black", size= 3)
pp
pp1<- ggnet2(nch.net, size= 6, color= "mode", label= T, label.size=3,
palette= c("actor"= "indianred3", "event"= "steelblue4"))
pp1
pp2<- ggnet2(nch.net, size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.25,
layout.exp= 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5) + # check_overlap= TRUE
guides(color= FALSE)
pp2
nums<- as.vector(c(1:sum(dim(nch))))
pp3<- ggnet2(nch.net, size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.5,
layout.exp = 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= nums),
color= "white", size= 3.5, fontface="bold") +
guides(color= FALSE)
pp3
pp4<- ggnet2(nch.net, size= 7,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.25,
layout.exp = 0.25) +
guides(color= FALSE) +
# This is how the check overlap option in ggnet2 goes.
# geom_text(aes(label= network.vertex.names(nch.net)),
#         color= "black", size= 3.5) + # check_overlap= TRUE
# This uses ggrepel.
geom_text_repel(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5)
pp4
sessionInfo()
colourpicker:::colourPickerAddin()
require(ggplot2)
require(network)
require(igraph)
require(sna)
require(ggnet)
require(ggrepel)
require(ergm)
require(intergraph)
require(RColorBrewer)
# Read data matrices.
# Read a network
# Creating the objects. Example input from the clipboard.
#
# Where data.txt has a weighted adjacency matrix, e.g.,:
Aa	Ab	Ac	Ba	Bb	Bc	Bd	Ca	Cb	Cc	Da
pp4<- ggnet2(nch.net, size= 7,
shape= "mode",
palette= "Set1",
color= "mode",
edge.size= bip_edgewt(nch, 7.5),
edge.alpha= 0.25,
layout.exp = 0.25) +
guides(color= FALSE) +
# This is how the check overlap option in ggnet2 goes.
# geom_text(aes(label= network.vertex.names(nch.net)),
#         color= "black", size= 3.5) + # check_overlap= TRUE
# This uses ggrepel.
geom_text_repel(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5)
pp4
library(ggbipart)
?ggbipart
library(ggbipart)
?ggbipart
>>>>>>> ggbipart
library(ggbipart)
detach (ggbipart)
library(ggbipart)
