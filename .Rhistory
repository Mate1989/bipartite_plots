First, letâ€™s define the placement coordinates of the full graph as two vertex attributes:
x = gplot.layout.fruchtermanreingold(net, NULL)
x
?gplot.layout
?layout.par
?gplot.layout.adj
gplot(rgraph(5))
gplot(rgraph(5),usecurv=TRUE)
gplot(rgraph(5),mode="mds")
rgraph(5)
g<-rgraph(5)
dim(g)
dim[1](g)
dim(g)[1]
seq_along(3)
?seq_along
seq(1,dim(g)[1])
seq(1,dim(g)[1], by=2)
seq(0, 1, length.out = 11)
coord<- cbind(seq(1,dim(g)[1]), seq(1,dim(g)[1]))
coord
coord<- cbind(seq(1,dim(g)[1]), seq(1,dim(g)[2])+5)
coord
coordx<- cbind(rep(2,dim(g)[1]), seq(1,dim(g)[2])+5)
coordx
coordy<- coordx+4
coordy
coordy<- cbind(rep(2+sep,dim(g)[1]), seq(1,dim(g)[2])+5)
sep=5
coordy<- cbind(rep(2+sep,dim(g)[1]), seq(1,dim(g)[2])+5)
coordx
coordy
gplot(rgraph(5), coord(coordx, coordy))
, by=2),
x = gplot.layout.fruchtermanreingold(net, NULL)
gplot(rgraph(5), coord(coordx, coordy))
coordx<- cbind(rep(2,dim(g)[1]), seq(1,dim(g)[2])+5)
coordy<- cbind(rep(7,dim(g)[1]), seq(1,dim(g)[2])+5)
coordx
coordy
gplot.layout.adj
gplot.layout.circle
coordx
coordy
coordA<- cbind(rep(2,dim(g)[1]), seq(1,dim(g)[1])+5)
coordP<- cbind(rep(7,dim(g)[2]), seq(1,dim(g)[2])+5)
coordA
coordP
layout.par<- rbind(coordA,coordP)
layout.par
gplot(rgraph(5), layout.par)
, by=2),
gplot(rgraph(5), layout.par)
M
dim(M)[1]
coordA<- cbind(rep(2,dim(M)[1]), seq(1,dim(M)[1])+5)
coordP<- cbind(rep(7,dim(M)[2]), seq(1,dim(M)[2])+5)
layout.par<- rbind(coordA,coordP)
coordA
coordP
gplot(M, layout.par)
?gplot.layout
mylayout<- rbind(coordA,coordP)
gplot(M, layout.par=mylayout)
mylayout
gplot(M, layout.par= mylayout)
gplot(M, mylayout)
p<-gplot(M)
p
mylayout<- as.matrix(rbind(coordA,coordP))
gplot(M, mylayout)
?ggnet
ggnet2(M, mylayout)
ggnet2(mymat, mylayout)
dim(mymat)
mymat
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1,dim(mymat)[1])+5)
coordP<- cbind(rep(7,dim(mymat)[2]), seq(1,dim(mymat)[2])+5)
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(mymat, mylayout)
mylayout
dim(mymat)[2]
ggnet2(mymat, mylayout)
plot(mylayout)
ggnet2(mylayout)
ggnet2(mymat, mylayout)
length(mymat)
length(mylayout)
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1,dim(mymat)[1])+5)
coordP<- cbind(rep(7,dim(mymat)[2]), seq(1,dim(mymat)[2])+5)
mylayout<- as.matrix(rbind(coordA,coordP))
length(mylayout)
dim(mymat)
dim(mylayout)
mylayout
mymat
ggnet2(mymat, mylayout)
bip_qtplot(mymat)
mymat
ggnet2(mymat, mode=mylayout)
mylayout
?set_attr
x = gplot.layout.fruchtermanreingold(mymat, NULL)
x
mymat <- read.table(pipe("pbpaste"), header=T, sep= "\t", row.names=1)
x = gplot.layout.fruchtermanreingold(mymat, NULL)
x
mylayout
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1,dim(mymat)[1])+5)
coordP<- cbind(rep(7,dim(mymat)[2]), seq(1,dim(mymat)[2])+5)
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(mymat, mode=mylayout)
mylayout
test.net<- bip_init_network(mymat)
test.net
ggnet2(test.net, mode=mylayout)
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1,dim(mymat)[1])+2)
coordP<- cbind(rep(7,dim(mymat)[2]), seq(1,dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(test.net, mode=mylayout)
mylayout
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1,dim(mymat)[1])+2)
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1,dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(test.net, mode=mylayout)
ggnet2(test.net, mode=mylayout, layout.exp=1.1)
?seq
coordA<- cbind(rep(2,dim(mymat)[1]), seq(dim(mymat)[1])+2, 1)
coordP<- cbind(rep(4,dim(mymat)[2]), seq(dim(mymat)[2])+2, 1)
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(test.net, mode=mylayout, layout.exp=1.1)
ggnet2(test.net, mode=mylayout, layout.exp=1.5)
ggnet2(test.net, mode=mylayout, layout.exp=2)
mylayout
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, dim(mymat)[1])+2)
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1, dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA,coordP))
mylayout
ggnet2(test.net, mode=mylayout, layout.exp=1.5)
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, rev(dim(mymat)[1])+2))
rev(dim(mymat)[1])
coordA<- cbind(rep(2,dim(mymat)[1]), rev(seq(1, dim(mymat)[1])+2))
coordP<- cbind(rep(4,dim(mymat)[2]), rev(seq(1, dim(mymat)[2])+2))
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(test.net, mode=mylayout, layout.exp=1.5)
mylayout
coordA<- cbind(rep(2,dim(mymat)[1]), rev(seq(1, dim(mymat)[1])+2))
coordP<- cbind(rep(2,dim(mymat)[2]), rev(seq(1, dim(mymat)[2])+2))
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(test.net, mode=mylayout, layout.exp=1.5)
mylayout
rep(2,dim(mymat)[1])
rep(2,dim(mymat)[2])
rev(seq(1, dim(mymat)[1])+2)
rev(seq(1, dim(mymat)[2])+2)
coordA<- cbind(rep(2,dim(mymat)[1]), rev(seq(1, dim(mymat)[1])+2))
coordP<- cbind(rep(4,dim(mymat)[2]), rev(seq(1, dim(mymat)[2])+2))
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(test.net, mode=mylayout, layout.exp=1.5)
mylayout
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, dim(mymat)[1])+2)
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1, dim(mymat)[2])+2)
mylayout
seq(1, dim(mymat)[1])+2
coordA
coordP
mylayout<- as.matrix(append(coordA,coordP))
mylayout
mylayout<- as.matrix(rbind(coordA,coordP))
mylayout
coordA<- cbind(rep(2,dim(mymat)[1]), seq(1, dim(mymat)[1])+2)
coordP<- cbind(rep(4,dim(mymat)[2]), seq(1, dim(mymat)[2])+2)
mylayout<- as.matrix(rbind(coordA,coordP))
ggnet2(test.net, mode=mylayout, layout.exp=1.5)
ggnet2(test.net, mode=mylayout, layout.exp=1.5) + scale_y_reverse()
ggnet2(test.net, mode=mylayout, layout.exp=1.5) + coord_flip()
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 3, degree)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 3, w="degree")
bip_railway(mymat, 9, w="degree")
bip_railway(mymat, 9, w=degree)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 9, w=degree)
bip_railway(mymat, 9)
bip_railway(mymat)
bip_railway(mymat,1)
bip_railway(mymat,1, w)
bip_railway(mymat,1, degree)
bip_railway(mymat, 5, degree)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 5, degree)
ggnet(test.net, weight="degree")
ggnet(test.net, weight="degree", layout.par = mylayout)
mylayout
ggnet(test.net, weight="degree", layout.par = mylayout)
ggnet(test.net, weight="degree", mylayout)
ggnet2(test.net, weight="degree", mylayout)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 6)
bip_railway(mymat, 8)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 8)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 8)
bip_railway(mymat, 10)
bip_railway(mymat, 6)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 10)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 10)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(mymat, 10)
bip_railway(nch, 10)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(nch, 10)
bip_railway(nch, 10, T)
p
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(nch, 10, T)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(nch, 10, T)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_railway.R', echo=TRUE)
bip_railway(nch, 10, T)
bip_railway(nch, 10)
bip_railway(nch, 5)
names(nch)
names(nch.net)
bip_qtplot(nch)
bip_qtplot(nch, layout.exp=1.5)
test.ig<- bip_init_igraph(mymat)
plot(test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat)
bip_gplot(nch)
bip_gplot(nch.net)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
bip_gplot(mymat,test.ig)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_briatte.R', echo=TRUE)
M
mymat
bipartite.network(mymat)
ggnet(net,
segment.size = edge.weights(M, 15), segment.alpha = .35,
label = TRUE, color = "black",
node.group = get.vertex.attribute(net, "mode"))
library(ggnet)
if(!require(ggplot2)) stop("must first install 'ggplot2' package.")
# Plotting bipartite networks from adjacency matrix of two-mode network.
# Using ggplot2 ----------------------------------------------------------
#-------------------------------------------------------------------------
# Draft code for plotting a bipartite network in ggplot2
#.........................................................................
require(network)
require(ggplot2)
require(sna)
require(ergm)
#
# Assign the matrix and the network objects here.
# mymat is a matrix with column names and row names.
# net is a network object.
# mymat <- nch    # NOTE: edit and uncomment this line.
# net <- nch.net   # NOTE: edit and uncomment this line.
#
if(!require(ggplot2)) stop("must first install 'ggplot2' package.")
if(!require(network)) stop("must first install 'igraph' package.")
if(!require(sna)) stop("must first install 'reshape2' package.")
if(!require(ergm)) stop("must first install 'reshape2' package.")
#
# Compute scaled weights, to use later with graphing links.
source("~/Dropbox/Working/~RCode/MyRCode/networks/bipartite_plots/functions/vectorize.R") # Uses my function vectorize
ewt <- vectorize(mymat)
ewt <- subset(ewt,ewt[,3]!=0)
ewt.scaled <- 30*log(ewt[,3]+1.5) / max(log(ewt[,3]+1.5))
#
# Input the adjacency matrix (mymat) and the network object (net)
m <- as.matrix.network.adjacency(net) # get sociomatrix
# get coordinates from Fruchterman and Reingold's
# force-directed placement algorithm.
plotcord <- data.frame(gplot.layout.fruchtermanreingold(m,
layout.par=NULL))
# or get it them from Kamada-Kawai's algorithm:
# plotcord <- data.frame(gplot.layout.kamadakawai(m, NULL))
colnames(plotcord) = c("X1","X2")
edglist <- as.matrix.network.edgelist(net)
edges <- data.frame(plotcord[edglist[,1],], plotcord[edglist[,2],])
colnames(edges) <-  c("X1","Y1","X2","Y2")
edges$midX  <- (edges$X1 + edges$X2) / 2
edges$midY  <- (edges$Y1 + edges$Y2) / 2
plotcord$vnames <- as.factor(network.vertex.names(net))
pnet <- ggplot()  +
geom_segment(aes(x=X1, y=Y1, xend = X2, yend = Y2,
size = ewt.scaled),
data=edges, colour="grey", alpha=0.5) +
geom_point(aes(plotcord$X1, plotcord$X2,
color=c(rep("grey90",dim(m)[2]),
rep("grey60",dim(m)[1]))),
size=10, alpha=0.8) +
geom_text(aes(plotcord$X1, plotcord$X2),
size = 4, #hjust = 0, #vjust=0.5,
label = plotcord$vnames) +
scale_colour_brewer(palette="Set1") +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
# discard default grid + titles in ggplot2
theme(panel.background = element_blank()) +
theme(legend.position="none") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.background = element_rect(colour = NA)) +
theme(panel.background = element_rect(fill = "white",
colour = NA)) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
print(pnet)
#
# --------------------------------------------------------------------------
source("./R/vectorize.R") # Uses my function vectorize
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_ggplot2.R', echo=TRUE)
# Compute scaled weights, to use later with graphing links.
source("./R/vectorize.R") # Uses my function vectorize
ewt <- vectorize(mymat)
ewt <- subset(ewt,ewt[,3]!=0)
ewt.scaled <- 30*log(ewt[,3]+1.5) / max(log(ewt[,3]+1.5))
#
net
m <- as.matrix.network.adjacency(net) # get sociomatrix
plotcord <- data.frame(gplot.layout.fruchtermanreingold(m,
layout.par=NULL))
colnames(plotcord) = c("X1","X2")
edglist <- as.matrix.network.edgelist(net)
edges <- data.frame(plotcord[edglist[,1],], plotcord[edglist[,2],])
colnames(edges) <-  c("X1","Y1","X2","Y2")
edges$midX  <- (edges$X1 + edges$X2) / 2
edges$midY  <- (edges$Y1 + edges$Y2) / 2
plotcord$vnames <- as.factor(network.vertex.names(net))
pnet <- ggplot()  +
geom_segment(aes(x=X1, y=Y1, xend = X2, yend = Y2,
size = ewt.scaled),
data=edges, colour="grey", alpha=0.5) +
geom_point(aes(plotcord$X1, plotcord$X2,
color=c(rep("grey90",dim(m)[2]),
rep("grey60",dim(m)[1]))),
size=10, alpha=0.8) +
geom_text(aes(plotcord$X1, plotcord$X2),
size = 4, #hjust = 0, #vjust=0.5,
label = plotcord$vnames) +
scale_colour_brewer(palette="Set1") +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
# discard default grid + titles in ggplot2
theme(panel.background = element_blank()) +
theme(legend.position="none") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.background = element_rect(colour = NA)) +
theme(panel.background = element_rect(fill = "white",
colour = NA)) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
print(pnet)
pnet <- ggplot()  +
# geom_segment(aes(x=X1, y=Y1, xend = X2, yend = Y2,
size = ewt.scaled),
data=edges, colour="grey", alpha=0.5) +
geom_point(aes(plotcord$X1, plotcord$X2,
color=c(rep("grey90",dim(m)[2]),
rep("grey60",dim(m)[1]))),
size=10, alpha=0.8) +
geom_text(aes(plotcord$X1, plotcord$X2),
size = 4, #hjust = 0, #vjust=0.5,
label = plotcord$vnames) +
scale_colour_brewer(palette="Set1") +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
# discard default grid + titles in ggplot2
theme(panel.background = element_blank()) +
theme(legend.position="none") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.background = element_rect(colour = NA)) +
theme(panel.background = element_rect(fill = "white",
colour = NA)) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
str(edges)
ggplot()  +
geom_segment(aes(x=X1, y=Y1, xend = X2, yend = Y2,
size = ewt.scaled),
data=edges, colour="grey", alpha=0.5)
edglist
ls()
M
ls()
dim(net)
rm(net)
nch.net
M1<-M
str(M1)
M<- nch.net
if(!is.network(M)) stop("Must first initialize the network; use 'bip_init_network.R'.")
source("./R/edgewt.R")
source("./R/bip_edgewt.R")
p<- ggnet(net,
segment.size = edgewt(M, 15), segment.alpha = .25,
label = TRUE, color = "black",
node.group = get.vertex.attribute(net, "mode"))
net<-nch.net
if(!is.network(M)) stop("Must first initialize the network; use 'bip_init_network.R'.")
source("./R/bip_edgewt.R")
p<- ggnet(net,
segment.size = edgewt(M, 15), segment.alpha = .25,
label = TRUE, color = "black",
node.group = get.vertex.attribute(net, "mode"))
p<- ggnet(net,
segment.size = edgewt(M, 15), segment.alpha = .25,
label = TRUE, color = "black"))
p<- ggnet(net,
segment.size = edgewt(M, 15), segment.alpha = .25,
label = TRUE, color = "black")
p<- ggnet(nch.net,
segment.size = edgewt(M, 15), segment.alpha = .25,
label = TRUE, color = "black")
edgewt(M, 15)
edgewt(M1, 15)
is.matrix(M1)
str(M1)
M.scaled
y<-edgewt(M1, 15)
str(y)
str(nch)
p<- ggnet(nch,
segment.size = edgewt(M, 15), segment.alpha = .25,
label = TRUE, color = "black")
p<- ggnet(nch.net,
segment.size = edgewt(M1, 15), segment.alpha = .25,
label = TRUE, color = "black")
p
net = bipartite.network(M, modes = c("Animals", "Plants"))
net = bipartite.network(M1, modes = c("Animals", "Plants"))
ggnet(net,
segment.size = edge.weights(M, 15), segment.alpha = .35,
label = TRUE, color = "black",
node.group = get.vertex.attribute(net, "mode"))
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_gplot.R', echo=TRUE)
ls()
g
bip_gplot(test.net,test.ig)
plot(g,
layout= layout.kamada.kawai,
# vertex.color=c(rep(c("coral3",alpha=0.6), dim(mymat)[1]),
#          rep(c("darkolivegreen3",alpha=0.6), dim(mymat)[2])),
vertex.color=c(rep(rgb(0.9, 0.1, 0, 0.9), dim(mymat)[1]),
rep(rgb(0, 0.9, 0.2, 0.9), dim(mymat)[2])),
#        mark.col= c("coral3","darkolivegreen3"),
vertex.size= 12,
vertex.shape= c(rep("square",dim(mymat)[1]),
rep("circle",dim(mymat)[2])),
edge.width=15*(ewt.scaled))
plot(test.ig)
plot(mymat)
edgewt(nch.net)
p<- ggnet(nch,
segment.size = edgewt(M1, 15), segment.alpha = .25,
label = TRUE, color = "black")
p<- ggnet(nch.net,
segment.size = edgewt(M1, 15), segment.alpha = .25,
label = TRUE, color = "black")
p
is.matrix(M)
is.matrix(M1)
str(M)
str(M1)
edgewt(as.matrix(M1))
edgewt(M1)
is.network(M)
p<- ggnet(M,
segment.size = edgewt(M1, 15), segment.alpha = .25,
label= T, color = "black")
p
bip_init_network(M)
b<-bip_init_network(M)
b
str(b)
is.network(M)
M
M1
