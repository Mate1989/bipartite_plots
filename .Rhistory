plot(karate, layout=l)
l <- layout.fruchterman.reingold(nch.ig)
plot(nch.ig, layout=l)
plot(nch.ig)
E(nch.ig)$width/4 <- E(nch.ig)$weight
E(nch.ig)$width <- E(nch.ig)$weight/4
plot(nch.ig)
E(nch.ig)$width <- E(nch.ig)$weight/10
plot(nch.ig)
E(nch.ig)$width <- E(nch.ig)$weight/50
plot(nch.ig)
AA <- get.adjacency(nch.ig)
v.attrs <- get.data.frame(nch.ig, what="vertices")
v.attrs
library(ergm) # Will load package ’network’ as well.
nch.s <- network::as.network(as.matrix(AA),
directed=FALSE)
nch.ig
network::set.vertex.attribute(nch.s, "frdiam_gape",
v.attrs$frdiam_gape)
network::set.vertex.attribute(nch.s, "Abundance",
v.attrs$abund)
my.ergm.bern <- formula(nch.s ~ edges)
my.ergm.bern
nch.s ~ edges
summary.statistics(my.ergm.bern)
my.ergm <- formula(nch.s ~ edges + kstar(2)
2 + + kstar(3) + triangle)
my.ergm <- formula(nch.s ~ edges + kstar(2)
+ kstar(3) + triangle)
summary.statistics(my.ergm)
my.ergm <- formula(nch.s ~ edges
+ gwesp(1, fixed=TRUE))
summary.statistics(my.ergm)
lazega.ergm <- formula(lazega.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("Abundance")
+ match("Abundance") + match("fam"))
lazega.ergm
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("Abundance")
+ match("Abundance") + match("fam"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
network::set.vertex.attribute(nch.s, "fam",
v.attrs$Fam)
library(ergm) # Will load package ’network’ as well.
nch.s <- network::as.network(as.matrix(AA),
directed=FALSE)
network::set.vertex.attribute(nch.s, "frdiam_gape",
v.attrs$frdiam_gape)
network::set.vertex.attribute(nch.s, "Abundance",
v.attrs$abund)
network::set.vertex.attribute(nch.s, "fam",
v.attrs$Fam)
network::set.vertex.attribute(nch.s, "bm",
v.attrs$bodymass)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("Abundance")
+ match("Abundance") + match("bodymass"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
nch.s <- network::as.network(as.matrix(AA),
directed=FALSE)
network::set.vertex.attribute(nch.s, "frdiam_gape",
v.attrs$frdiam_gape)
network::set.vertex.attribute(nch.s, "Abundance",
v.attrs$abund)
network::set.vertex.attribute(nch.s, "bodymass",
v.attrs$bodymass)
nch.s
AA <- get.adjacency(nch.ig, bipartite(26))
?get.adjacency
AA <- get.adjacency(nch.ig)
v.attrs <- get.data.frame(nch.ig, what="vertices")
?as.network
nch.s <- network::as.network(as.matrix(AA),
directed=FALSE, bipartite=T)
network::set.vertex.attribute(nch.s, "frdiam_gape",
v.attrs$frdiam_gape)
network::set.vertex.attribute(nch.s, "Abundance",
v.attrs$abund)
network::set.vertex.attribute(nch.s, "bodymass",
v.attrs$bodymass)
my.ergm.bern <- formula(nch.s ~ edges)
my.ergm.bern
nch.s ~ edges
summary.statistics(my.ergm.bern)
my.ergm <- formula(nch.s ~ edges + kstar(2)
+ kstar(3) + triangle)
summary.statistics(my.ergm)
my.ergm <- formula(nch.s ~ edges
+ gwesp(1, fixed=TRUE))
summary.statistics(my.ergm)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("Abundance")
+ match("Abundance") + match("bodymass"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ match("frdiam_gape")
+ match("Abundance")
+ match("bodymass"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
nch.ergm.fit
anova.ergm(nch.ergm.fit)
summary.ergm(nch.ergm.fit)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("Abundance")
+ nodemain("bodymass"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ match("Abundance")
+ match("bodymass"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
mcmc.diagnostics()
mcmc.diagnostics(nch.ergm)
mcmc.diagnostics(nch.ergm.fit)
anova.ergm(nch.ergm.fit)
summary.ergm(nch.ergm.fit)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("Abundance")
+ match("bodymass"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ match("Abundance")
+ nodemain("bodymass"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ match("Abundance")
+ match("bodymass"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
mcmc.diagnostics(nch.ergm.fit)
anova.ergm(nch.ergm.fit)
summary.ergm(nch.ergm.fit)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ match("Abundance"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
mcmc.diagnostics(nch.ergm.fit)
anova.ergm(nch.ergm.fit)
summary.ergm(nch.ergm.fit)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
mcmc.diagnostics(nch.ergm.fit)
anova.ergm(nch.ergm.fit)
anova.ergm(nch.ergm.fit, test="Chi")
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ match("Abundance"))
set.seed(42)
nch.ergm.fit <- ergm(nch.ergm)
mcmc.diagnostics(nch.ergm.fit)
anova.ergm(nch.ergm.fit, test="Chi")
summary.ergm(nch.ergm.fit)
nch.ergm <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape"))
nch.ergm2 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
# + nodemain("frdiam_gape"))
+ match("Abundance"))
set.seed(42)
nch.ergm.fit1 <- ergm(nch.ergm1)
nch.ergm1 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape"))
nch.ergm2 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
# + nodemain("frdiam_gape"))
+ match("Abundance"))
set.seed(42)
nch.ergm.fit1 <- ergm(nch.ergm1)
mcmc.diagnostics(nch.ergm.fit1)
mcmc.diagnostics(nch.ergm.fit2)
anova.ergm(nch.ergm.fit1, test="Chi")
summary.ergm(nch.ergm.fit1)
anova.ergm(nch.ergm.fit2, test="Chi")
nch.ergm.fit2 <- ergm(nch.ergm2)
anova.ergm(nch.ergm.fit2, test="Chi")
anova.ergm(nch.ergm.fit1, nch.ergm.fit2, test="Chi")
nch.ergm2 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
# + nodemain("frdiam_gape"))
+ nodemain("Abundance"))
set.seed(42)
nch.ergm.fit1 <- ergm(nch.ergm1)
nch.ergm.fit2 <- ergm(nch.ergm2)
nch.ergm2 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
# + nodemain("frdiam_gape"))
+ nodemain("bodymass"))
nch.ergm.fit2 <- ergm(nch.ergm2)
summary.ergm(nch.ergm.fit2)
gof.nch.ergm1 <- gof(nch.ergm.fit1)
plot(gof.nch.ergm1)
gof.nch.ergm2 <- gof(nch.ergm.fit2)
plot(gof.nch.ergm2)
gof.nch.ergm1 <- gof(nch.ergm.fit1)
par(mfrow=c(1, 3))
plot(gof.nch.ergm1)
gof.nch.ergm2 <- gof(nch.ergm.fit2)
par(mfrow=c(1, 3))
plot(gof.nch.ergm2)
nch.ig
names(nch_attr)
V(nch.ig)$frugivory<- nch_attr$f
nch.edg<- as_edgelist(nch.ig)
V(nch.ig)$phenology<- nch_attr$ph
V(nch.ig)$phen.forb<- nch_attr$pp
network::set.vertex.attribute(nch.s, "frugivory",
v.attrs$frugivory)
AA <- get.adjacency(nch.ig)
v.attrs <- get.data.frame(nch.ig, what="vertices")
v.attrs
nch.s <- network::as.network(as.matrix(AA),
directed=FALSE, bipartite=T)
network::set.vertex.attribute(nch.s, "frdiam_gape",
v.attrs$frdiam_gape)
network::set.vertex.attribute(nch.s, "Abundance",
v.attrs$abund)
network::set.vertex.attribute(nch.s, "bodymass",
v.attrs$bodymass)
network::set.vertex.attribute(nch.s, "frugivory",
v.attrs$frugivory)
nch.ig
network::set.vertex.attribute(nch.s, "phenology",
v.attrs$phenology)
network::set.vertex.attribute(nch.s, "phen.forb",
v.attrs$phen.forb)
my.ergm.bern <- formula(nch.s ~ edges)
my.ergm.bern
nch.s ~ edges
summary.statistics(my.ergm.bern)
my.ergm <- formula(nch.s ~ edges + kstar(2)
+ kstar(3) + triangle)
summary.statistics(my.ergm)
my.ergm <- formula(nch.s ~ edges
+ gwesp(1, fixed=TRUE))
summary.statistics(my.ergm)
nch.s
dim(nch)
26
nch.s <- network::as.network(as.matrix(AA),
directed=FALSE, bipartite=26)
network::set.vertex.attribute(nch.s, "frdiam_gape",
v.attrs$frdiam_gape)
network::set.vertex.attribute(nch.s, "Abundance",
v.attrs$abund)
network::set.vertex.attribute(nch.s, "bodymass",
v.attrs$bodymass)
network::set.vertex.attribute(nch.s, "frugivory",
v.attrs$frugivory)
network::set.vertex.attribute(nch.s, "phenology",
v.attrs$phenology)
network::set.vertex.attribute(nch.s, "phen.forb",
v.attrs$phen.forb)
AA <- get.adjacency(nch.ig)
v.attrs <- get.data.frame(nch.ig, what="vertices")
library(ergm) # Will load package ’network’ as well.
nch.s <- network::as.network(as.matrix(AA),
directed=FALSE, bipartite=26)
network::set.vertex.attribute(nch.s, "frdiam_gape",
v.attrs$frdiam_gape)
network::set.vertex.attribute(nch.s, "Abundance",
v.attrs$abund)
network::set.vertex.attribute(nch.s, "bodymass",
v.attrs$bodymass)
network::set.vertex.attribute(nch.s, "frugivory",
v.attrs$frugivory)
network::set.vertex.attribute(nch.s, "phenology",
v.attrs$phenology)
network::set.vertex.attribute(nch.s, "phen.forb",
v.attrs$phen.forb)
my.ergm.bern <- formula(nch.s ~ edges)
my.ergm.bern
nch.s ~ edges
summary.statistics(my.ergm.bern)
my.ergm <- formula(nch.s ~ edges + kstar(2)
+ kstar(3) + triangle)
summary.statistics(my.ergm)
my.ergm <- formula(nch.s ~ edges
+ gwesp(1, fixed=TRUE))
summary.statistics(my.ergm)
nch.s
nch.ergm1 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("phenology"))
set.seed(42)
nch.ergm.fit1 <- ergm(nch.ergm1)
mcmc.diagnostics(nch.ergm.fit1)
anova.ergm(nch.ergm.fit1, test="Chi")
summary.ergm(nch.ergm.fit2)
summary.ergm(nch.ergm.fit1)
nch.s
nch.ergm1 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("phenology")
+ nodemain("bodymass"))
set.seed(42)
nch.ergm.fit1 <- ergm(nch.ergm1)
nch.ergm1 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("phenology")
+ nodemain("Abundance"))
set.seed(42)
nch.ergm.fit1 <- ergm(nch.ergm1)
nch.ergm1 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("phenology")
+ match("Abundance"))
set.seed(42)
nch.ergm.fit1 <- ergm(nch.ergm1)
mcmc.diagnostics(nch.ergm.fit1)
anova.ergm(nch.ergm.fit1, test="Chi")
summary.ergm(nch.ergm.fit1)
nch.ergm1 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape")
+ nodemain("phenology"))
nch.ergm2 <- formula(nch.s ~ edges + gwesp(log(3), fixed=TRUE)
+ nodemain("frdiam_gape"))
set.seed(42)
nch.ergm.fit1 <- ergm(nch.ergm1)
nch.ergm.fit2 <- ergm(nch.ergm2)
mcmc.diagnostics(nch.ergm.fit1)
mcmc.diagnostics(nch.ergm.fit2)
anova.ergm(nch.ergm.fit1, test="Chi")
anova.ergm(nch.ergm.fit2, test="Chi")
anova.ergm(nch.ergm.fit1, nch.ergm.fit2, test="Chi")
summary.ergm(nch.ergm.fit1)
summary.ergm(nch.ergm.fit2)
gof.nch.ergm1 <- gof(nch.ergm.fit1)
par(mfrow=c(1, 3))
plot(gof.nch.ergm1)
gof.nch.ergm2 <- gof(nch.ergm.fit2)
par(mfrow=c(1, 3))
plot(gof.nch.ergm2)
nch_attr
cor(nch_attr)
str(nch_attr)
glimpse(nch_attr)
cor(nch_attr[,c(7:16)])
?cor
cor(nch_attr[,c(7:16)],na.rm = FALSE)
stats::cor(nch_attr[,c(7:16)],na.rm = FALSE)
nch_attr[,c(7:16)]
stats::cor(nch_attr[,c(7:13,15,16)],na.rm = FALSE)
stats::cor(nch_attr[,c(7:13,15,16)])
stats::cor.test(nch_attr[,c(7:13,15,16)])
stats::cor.test(nch_attr[,c(7:13,15,16)], use="pairwise.complete.obs")
stats::cor(nch_attr[,c(7:13,15,16)], use="pairwise.complete.obs")
mat<-nch_attr[,c(7:13,15,16)]
mat
stats::cor(mat, use="pairwise.complete.obs")
library(ergm)
DSmod0 <- ergm(nch.s ~ edges,
control=control.ergm(seed=40))
DSmod0
summary(DSmod0)
plogis(coef(DSmod0))
?plogis
nch.s
scatter.smooth(nch.s %v% 'frdiam_gape', degree(nch.s, gmode='graph'),
xlab='Fruit diam or Gape width (mm)',
ylab='Degree')
library(statnet)
scatter.smooth(nch.s %v% 'frdiam_gape', degree(nch.s, gmode='graph'),
xlab='Fruit diam or Gape width (mm)',
ylab='Degree')
scatter.smooth(nch.s %v% 'frdiam_gape', degree(nch.s),
xlab='Fruit diam or Gape width (mm)',
ylab='Degree')
?statnet::degree
?degree
nch.s
DSmod1 <- ergm(nch.s ~ edges +
nodecov('phenology') +
nodecov('Abundance')
nodecov('frdiam_gape') ,
control=control.ergm(seed=40))
DSmod1 <- ergm(nch.s ~ edges +
nodecov('phenology') +
nodecov('Abundance') +
nodecov('frdiam_gape') ,
control=control.ergm(seed=40))
DSmod1 <- ergm(nch.s ~ edges +
nodecov('phenology') +
#   nodecov('Abundance') +
nodecov('frdiam_gape') ,
control=control.ergm(seed=40))
nch.s
p_edg <- coef(DSmod1)[1]
p_edg
coef(DSmod1)[3]
p_size <- coef(DSmod1)[3] plogis(p_edg + 5*p_size + 10*p_size)
p_size <- coef(DSmod1)[3]
plogis(p_edg + 5*p_size + 10*p_size)
plogis(p_edg + 10*p_size + 10*p_size)
summary(DSmod1)
nch_attr
p_size2 <- coef(DSmod1)[2]
p_size2
p_size3
p_size3 <- coef(DSmod1)[3]
p_size3
plogis(p_edg + 1*p_size2 + 10*p_size2)
plogis(coef(DSmod0))
plogis(p_edg + 10*p_size2 + 10*p_size2)
plogis(p_edg + 12*p_size2 + 12*p_size2)
plogis(coef(DSmod0))
plot(gof.nch.ergm2)
plot(gof.nch.ergm1)
gof.DSmod1 <- gof(DSmod1)
library(ergm) # Will load package ’network’ as well.
gof.DSmod1 <- gof(DSmod1)
plot(DSmod1)
DSmod1 <- ergm(nch.s ~ edges +
nodecov('phenology') +
#   nodecov('Abundance') +
nodecov('frdiam_gape') ,
control=control.ergm(seed=40))
gof.DSmod1 <- gof(DSmod1)
plot(gof.DSmod1)
plogis(coef(DSmod0))
plogis(coef(DSmod1))
# Label weights directly into edges
bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
col= c("actor"= "grey80", "event"= "gold2")
bip.net<- network(bip,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
ggnet2(bip.net,
color= "mode", palette = col,
label= TRUE, shape= "mode",
edge.label= "weights")
# The Nava de las Correhuelas dataset.
nch<- read.table("./data-raw/w96_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
## Node attributes
nch_attr<- read.table("./data-raw/w96_node_attributes.csv",
header=T, sep=",",
dec=".", na.strings="NA")
# The Hato Raton dataset.
hr<- read.table("./data-raw/w97_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
## Node attributes
hr_attr<- read.table("./data-raw/w97_node_attributes.csv",
header=T, sep=",",
dec=".", na.strings="NA")
a = matrix(as.integer(runif(100)<.3), ncol=10)
a[lower.tri(a)] = 0
a
netcarto(a)
library(rnetcarto)
netcarto(a)
mymat <- read.table(pipe("pbpaste"), header= T, sep= "\t", row.names= 1)
mat<-as.matrix(mymat)
netcarto(mat, seed=183, iterfac = 1,
coolingfac = 0.999, bipartite = TRUE)
nch.ig
edge.list(nch.ig)
as.edge.list(nch.ig)
require(ggplot2)
require(network)
require(igraph)
require(sna)
require(ggnet)
require(ggrepel)
require(ergm)
require(intergraph)
require(RColorBrewer)
as.edge.list(nch.ig)
edge.list(nch.ig)
?igraph
as_edgelist(nch.ig)
tt<-as_edgelist(nch.ig)
tt
netcarto(tt, seed=183, iterfac = 1,
coolingfac = 0.999, bipartite = TRUE)
nch
netcarto(nch, seed=183, iterfac = 1,
coolingfac = 0.999, bipartite = TRUE)
mat<-as.matrix(nch)
netcarto(mat, seed=183, iterfac = 1,
coolingfac = 0.999, bipartite = TRUE)
netcarto(t(mat), seed=183, iterfac = 1,
coolingfac = 0.999, bipartite = TRUE)
netcarto(t(mat), seed=183, iterfac = 1,
coolingfac = 0.995, bipartite = TRUE)
library(rnetcarto)
mat<-as.matrix(nch)
netcarto(t(mat), seed=183, iterfac = 1,
coolingfac = 0.995, bipartite = TRUE)
netcarto(mat, seed=183, iterfac = 1,
coolingfac = 0.995, bipartite = TRUE)
