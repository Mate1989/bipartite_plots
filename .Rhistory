color= "mode",
layout.exp= 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5) + # check_overlap= TRUE
guides(color= FALSE)
pp2
pp2<- bip_ggnet(nch.net, as.matrix(nch),
size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp= 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5) + # check_overlap= TRUE
guides(color= FALSE) +
theme(legend.position="none")          # Hide legend
pp2
pp2<- bip_ggnet(nch.net, as.matrix(nch),
size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp= 0.25) +
geom_point(aes(color= color), size= 8, color= "white") +
geom_point(aes(color= color), size= 8, alpha= 0.5) +
geom_point(aes(color= color), size= 6) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5) + # check_overlap= TRUE
guides(color= FALSE) +
theme(legend.position="none")          # Hide legend
pp2
nums<- as.vector(c(1:sum(dim(nch))))
pp3<- bip_ggnet(nch.net, as.matrix(nch),
size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp = 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= nums),
color= "white", size= 3.5, fontface="bold") +
guides(color= FALSE)
pp3
nums<- as.vector(c(1:sum(dim(nch))))
pp3<- bip_ggnet(nch.net, as.matrix(nch),
size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp = 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= nums),
color= "white", size= 3.5, fontface="bold") +
guides(color= FALSE) +
theme(legend.position="none")          # Hide legend
pp3
pp4<- ggnet2(nch.net, as.matrix(nch),
size= 7,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp = 0.25) +
guides(color= FALSE) +
# This is how the check overlap option in ggnet2 goes.
# geom_text(aes(label= network.vertex.names(nch.net)),
#         color= "black", size= 3.5) + # check_overlap= TRUE
# This uses ggrepel.
geom_text_repel(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5)
pp4<- ggnet2(nch.net, as.matrix(nch),
size= 7,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp = 0.25) +
guides(color= FALSE) +
# This is how the check overlap option in ggnet2 goes.
# geom_text(aes(label= network.vertex.names(nch.net)),
#         color= "black", size= 3.5) + # check_overlap= TRUE
# This uses ggrepel.
geom_text_repel(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5)
g<- bip_railway(hr, label=T)
g+ coord_flip()
# Plot layout coordinates for railway networkplot. Input is the
# adjacency matrix.
#
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
g<- bip_railway(mymat, label=T)
g+ coord_flip()
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_init_igraph.R', echo=TRUE)
is.matrix(nch)
is.matrix(hr)
nch.ig<- bip_init_igraph(as.matrix(nch))
dim(nch)[1]
dim(as.matrix(nch))[1]
hr.ig<- bip_init_igraph(hr)
?graph_from_incidence_matrix
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_init_igraph.R', echo=TRUE)
(
)
hr.ig<- bip_init_igraph(hr)
nch.ig<- bip_init_igraph(nch)
hr.net<- bip_init_network(hr)
nch.ig
# Plot layout coordinates for railway networkplot. Input is the
# adjacency matrix.
#
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
g<- bip_railway(mymat, label=T)
g+ coord_flip()
# Detect and color the mode
col= c("P"= "grey80", "A"= "gold2")
bip_ggnet(nch.net, as.matrix(nch),
color= "mode", palette= col,
label= TRUE, label.size=3,
layout.exp= 0.2) +       # Using layout.exp because of long labels
theme(legend.position="none")
bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
bipmat<- as.matrix(bip)
col= c("actor"= "grey80", "event"= "gold2")
bip.net<- network(bip,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
bip_ggnet(bip.net, as.matrix(bip),
color= "mode", palette = col,
edge.label = "weights",
label= TRUE)
bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
col= c("actor"= "grey80", "event"= "gold2")
bip.net<- bip_init_network(bip,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
col= c("actor"= "grey80", "event"= "gold2")
bip.net<- bip_init_network(as.matrix(bip),
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
col= c("actor"= "grey80", "event"= "gold2")
bip.net<- bip_init_network(as.matrix(bip),
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
bip.net<- bip_init_network(as.matrix(bip)
bip_ggnet(bip.net, as.matrix(bip),
bip.net<- bip_init_network(as.matrix(bip))
bip_ggnet(bip.net, as.matrix(bip),
color= "mode", palette = col,
edge.label = "weights",
label= TRUE)
col= c("A"= "grey80", "P"= "gold2")
bip.net<- bip_init_network(as.matrix(bip))
bip_ggnet(bip.net, as.matrix(bip),
color= "mode", palette = col,
edge.label = "weights",
label= TRUE)
bip_ggnet(bip.net, as.matrix(bip))
bip_ggnet(bip.net, as.matrix(bip),
#  color= "mode", palette = col,
edge.label = "weights")
bip_ggnet(bip.net, as.matrix(bip),
#  color= "mode", palette = col,
edge.label = "weights",
label= TRUE)
source('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/R/bip_ggnet.R', echo=TRUE)
bip= data.frame(P1= c(1, 12, 6, 0),
P2= c(1, 0, 4, 0),
P3= c(1, 7, 3, 12),
row.names= letters[1:4])
col= c("A"= "grey80", "P"= "gold2")
bip.net<- bip_init_network(as.matrix(bip))
bip_ggnet(bip.net, as.matrix(bip),
#  color= "mode", palette = col,
edge.label = "weights",
label= TRUE)
# Set colors for each mode
col= c("P"= "#FC9272", "A"= "#9ECAE1")
pp<- bip_ggnet(hr.net, as.matrix(hr),
size=7, shape= "mode", #label= T,
color= "mode", palette= col,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(hr.net)),
color= "black", size= 3) +
theme(legend.position="none")                 # Hide legend
pp
nums<- as.vector(c(1:sum(dim(nch))))
pp3<- bip_ggnet(nch.net, as.matrix(nch),
size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp = 0.25) +
geom_point(aes(color= color), size= 10, color= "white") +
geom_point(aes(color= color), size= 10, alpha= 0.5) +
geom_point(aes(color= color), size= 8) +
geom_text(aes(label= nums),
color= "white", size= 3.5, fontface="bold") +
guides(color= FALSE) +
theme(legend.position="none")          # Hide legend
pp3
pp2<- bip_ggnet(nch.net, as.matrix(nch),
size= 0,
shape= "mode",
palette= "Set1",
color= "mode",
layout.exp= 0.25) +
geom_point(aes(color= color), size= 8, color= "white") +
geom_point(aes(color= color), size= 8, alpha= 0.5) +
geom_point(aes(color= color), size= 6) +
geom_text(aes(label= network.vertex.names(nch.net)),
color= "black", size= 3.5) + # check_overlap= TRUE
guides(color= FALSE) +
theme(legend.position="none")          # Hide legend
pp2
# Set colors for each mode
col= c("P"= "#FC9272", "A"= "#9ECAE1")
pp<- bip_ggnet(hr.net, as.matrix(hr),
size=7, shape= "mode", #label= T,
color= "mode", palette= col,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(hr.net)),
color= "black", size= 3) +
theme(legend.position="none")                 # Hide legend
pp
# Plot layout coordinates for railway networkplot. Input is the
# adjacency matrix.
#
mymat <- read.delim("./data-raw/data.txt", row.names=1)   # Not run.
g<- bip_railway(mymat, label=T)
g+ coord_flip()
col= c("P"= "#FC9272", "A"= "#9ECAE1")
pp<- bip_ggnet(hr.net, as.matrix(hr),
size=7, shape= "mode", #label= T,
color= "mode", palette= col,
layout.exp= 0.25) +
geom_text(aes(label= network.vertex.names(hr.net)),
color= "black", size= 3) +
theme(legend.position="none")                 # Hide legend
pp
knit_with_parameters('~/Documents/Working/~RCode/MyRCode/networks/bipartite_plots/ggbipart.Rmd')
<
meta<- read.csv("./data-raw/w96_adj_fru.csv", header=T, row.names=1)
nch<- read.table("./data-raw/w96_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
meta<- read.table("./data-raw/w96_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
meta<- read.table("./data-raw/w96_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
meta<- read.table("./data-raw/w96_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
metam<-as.matrix(meta)
library(networkD3); library(igraph); library(reshape2)
data1<-melt(metam) ## transform to edgelist
head(data1)
data1<-melt(metam) ## transform to edgelist
head(data1)
data <- subset(data1, value==1) ## select only interactions =1
head(data)
dim(data)
g3=graph.data.frame(data, directed=FALSE) # sets the graph framework
sj_list3 <- igraph_to_networkD3(g3, group = members3)
wt3 <- cluster_walktrap(g3, steps = 16)
members3 <- membership(wt3)
head(members3)
sj_list3 <- igraph_to_networkD3(g3, group = members3)
head(sj_list3)
a<-forceNetwork(Links = sj_list3$links, Nodes = sj_list3$nodes, Source = 'source',
Target = 'target', NodeID = 'name', Group = 'group',
zoom = TRUE, linkDistance = 200,opacity=1.6)
a<-forceNetwork(Links = sj_list3$links, Nodes = sj_list3$nodes,
Source = 'source',
Target = 'target', NodeID = 'name',
Group = 'group',
zoom = TRUE, linkDistance = 200, opacity=1.6,
colourScale = "d3.scale.category20f()")
a
sj_list3
members3
igraph_to_networkD3
wt3
sj_list3 <- igraph_to_networkD3(g3, group = members3)
sj_list3
g3
a
a<-forceNetwork(Links = sj_list3$links, Nodes = sj_list3$nodes,
Source = 'source',
Target = 'target', NodeID = 'name',
Group = 'group',
zoom = TRUE, linkDistance = 200, opacity=1.6)
a
sj_list3
sj_list3$links
a<-forceNetwork(Links = sj_list3$links, Nodes = sj_list3$nodes,
Source = 'source',
Target = 'target', NodeID = 'name',
Group = 'group',
zoom = TRUE, linkDistance = 200, opacity=1.6)
a
ForceNetwork(data2)
simpleNetwork(sj_list3, file = "meta.html")
?forceNetwork
?igraph_to_networkD3
g3
Fam
?igraph
# Random bipartite graph
inc <- matrix(sample(0:1, 50, replace = TRUE, prob=c(2,1)), 10, 5)
g <- graph_from_incidence_matrix(inc)
plot(g, layout = layout_as_bipartite,
vertex.color=c("green","cyan")[V(g)$type+1])
# Two columns
g %>%
add_layout_(as_bipartite()) %>%
plot()
?graph_from_incidence_matrix
g3<- bip_init_igraph(metam)
g3
g3<- graph_from_incidence_matrix(metam, bipartite=T)
g3<- graph_from_incidence_matrix(metam, weighted=T)
g3
str(g3)
graph_attr_names(g3)
source("./functions/igraph_to_networkD3.R")
dim(metam)
head(metam)
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
g3
is.bipartite(g3)
sj_list3 <- igraph_to_networkD3(g3, group= mode)
sj_list3 <- igraph_to_networkD3(g3, group= "mode")
plot(nch.ig, layout=layout_as_bipartite(nch.ig, hgap=2, vgap=5),
vertex.size=0,
vertex.shape= ifelse(V(nch.ig)$type, "circle", "circle"),
vertex.color= ifelse(V(nch.ig)$type, "red", "cyan"))
nch.ig %>%
add_layout_(as_bipartite(hgap=2, vgap=5)) %>%
plot(vertex.size=0,
vertex.shape= ifelse(V(nch.ig)$type, "circle", "circle"),
vertex.color= ifelse(V(nch.ig)$type, "red", "cyan"))
bdiag <- function(x){
if(!is.list(x)) stop("x not a list")
n <- length(x)
if(n==0) return(NULL)
x <- lapply(x, function(y) if(length(y)) as.matrix(y) else
stop("Zero-length component in x"))
d <- array(unlist(lapply(x, dim)), c(2, n))
rr <- d[1,]
cc <- d[2,]
rsum <- sum(rr)
csum <- sum(cc)
out <- array(0, c(rsum, csum))
ind <- array(0, c(4, n))
rcum <- cumsum(rr)
ccum <- cumsum(cc)
ind[1,-1] <- rcum[-n]
ind[2,] <- rcum
ind[3,-1] <- ccum[-n]
ind[4,] <- ccum
imat <- array(1:(rsum * csum), c(rsum, csum))
iuse <- apply(ind, 2, function(y, imat) imat[(y[1]+1):y[2],
(y[3]+1):y[4]], imat=imat)
iuse <- as.vector(unlist(iuse))
out[iuse] <- unlist(x)
return(out)
}
ml<- list(metam,t(metam))
bdiag(ml)
mm<- bdiag(ml)
dim(mm)
dim(metam[1])  +dim(metam[2])
dim(metam[1])  +dim(metam)[2]
dim(metam[1])
dim(metam)[1]
dim(metam)[1]+dim(metam)[2]
is.matrix(mm)
dim(mm)
library(networkD3); library(igraph); library(reshape2)
data1<- melt(mm) ## transform to edgelist
data<- subset(data1, value==1) ## select only interactions =1
head(data)
dim(data)
g3= graph.data.frame(data, directed=FALSE) # sets the graph framework
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
V(g3)
g3= graph.data.frame(data1, directed=FALSE) # sets the graph framework
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
sj_list3 <- igraph_to_networkD3(g3, group= "mode")
sj_list3 <- igraph_to_networkD3(g3, group= V(g3)$mode)
head(sj_list3)
a<-forceNetwork(Links= sj_list3$links, Nodes = sj_list3$nodes,
Source= 'source',
Target= 'target', NodeID= 'name',
Group= 'group',
zoom= TRUE, linkDistance= 200, opacity= 1.6)
a
data1<- melt(mm) ## transform to edgelist
data<- subset(data1, value==1) ## select only interactions = 1
head(data)
mm
row.names(meta)
rbind(row.names(meta),colnames(meta))
cbind(row.names(meta),colnames(meta))
append(row.names(meta),colnames(meta))
row.names(mm)<- append(row.names(meta),colnames(meta))
colnames(mm)<- append(row.names(meta),colnames(meta))
mm
data1<- melt(mm) ## transform to edgelist
head(data1)
data<- subset(data1, value==1) ## select only interactions = 1
head(data)
V(g3)
data1<- melt(metam) ## transform to edgelist
data<- subset(data1, value==1) ## select only interactions = 1
head(data)
g3= graph.data.frame(data, directed=FALSE) # sets the graph framework
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
dim(data)
V(g3)
g3
dim(V(g3))
length(V(g3))
print(V(g3))
g3
g3= graph.data.frame(data, directed=FALSE) # sets the graph framework
g3
sj_list3 <- igraph_to_networkD3(g3, group= V(g3)$mode)
sj_list3 <- igraph_to_networkD3(g3)
sj_list3
names(sj_list3)
a<-forceNetwork(Links= sj_list3$links, Nodes = sj_list3$nodes,
Source= 'source',
Target= 'target', NodeID= 'name',
Group= 'group',
zoom= TRUE, linkDistance= 200, opacity= 1.6)
#colourScale = "d3.scale.category20f()")
a
meta<- read.table("./data-raw/w96_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
meta<- read.table("./data-raw/w96_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
meta<- read.table("./data-raw/w96_adj_fru.csv",
header=T, sep=",", row.names=1,
dec=".", na.strings="NA")
metam<-as.matrix(meta)
dim(metam)
dim(metam)[1]+dim(metam)[2]
library(networkD3); library(igraph); library(reshape2)
data1<- melt(metam) ## transform to edgelist
data<- subset(data1, value==1) ## select only interactions = 1
head(data)
dim(data)
g3= graph.data.frame(data, directed=FALSE) # sets the graph framework
V(g3)$mode <- c(rep("Plant",26),rep("Animal",36))
sj_list3 <- igraph_to_networkD3(g3)
a<-forceNetwork(Links= sj_list3$links, Nodes = sj_list3$nodes,
Source= 'source',
Target= 'target', NodeID= 'name',
Group= 'group',
zoom= TRUE, linkDistance= 200, opacity= 1.6)
#colourScale = "d3.scale.category20f()")
a
g3<- graph.data.frame(data, directed=FALSE) # sets the graph framework
g3
data
dim(data)
data
g3<- graph.data.frame(data, directed=FALSE, weighted=T) # sets the graph framework
g3<- graph.data.frame(data, directed=FALSE, what="both") # sets the graph framework
g3<- graph_from_data_frame(data, directed=FALSE, what="both") # sets the graph framework
data1
?melt
View(data1)
unique(data[,1])
unique(data[,2])
vnames<- data.frame(species=append(unique(data[,2]),unique(data[,2])),mode= c(rep("Plant",26),rep("Animal",36))
)
vnames<- data.frame(species=append(unique(data[,1]),unique(data[,2])),mode= c(rep("Plant",26),rep("Animal",36)))
table(unique(data[,1]))
table(unique(data[,2]))
append(unique(data[,1]),unique(data[,2]))
